#This is a bit wrong way around as QF used develop branch to make their fork
#master branch is now behind. 
#When QLNet publishes a new version by pull request to master we should:
# 1 merge its master to our master
# 2 merge our develop branch to our master
# 3 modify this yaml

trigger:
  branches:
      include:
#      - master
      - develop
pr:
#- master
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: BuildConfiguration
  value: Release
- name: 'Version.MajorMinor'
  value: 1.11
# Counter for each build run.
- name: Version.Revision
  value: $[counter(variables['Version.MajorMinor'], 6)]
- name: BUILD_BUILDNUMBER
  value: $(Version.MajorMinor).$(Version.Revision).$(Build.BuildID)
- name: Projects
  value: '**/QLNet.sln'

steps:
- script: echo $(Version.MajorMinor).$(Version.Revision).$(Build.BuildID)
- powershell:
  env:
    BUILD_BUILDNUMBER: $(Version.MajorMinor).$(Version.Revision).$(Build.BuildID)

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(Projects)'
    vstsFeed: '8485f31c-8383-4a52-9f73-cb780c09dd25'

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(Projects)'
    arguments: '--configuration $(BuildConfiguration)'
    feedsToUse: 'select'
    versioningScheme: 'off'

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '$(Projects)'
    arguments: '--configuration $(BuildConfiguration) --collect "Code Coverage"'
    publishTestResults: true
    feedsToUse: 'select'
    versioningScheme: 'off'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/QLNet.csproj'
    nobuild: true
    versioningScheme: 'byBuildNumber'
